package protocol

import (
	"bytes"
	"encoding/base64"
	"net/http"
	"testing"
)

var (
	base64Payload = `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`
)

func TestSSMLMessage_Encode(t *testing.T) {
	msg := &SSMLMessage{}

	msg.Header = http.Header{
		"Path":         []string{PathSSML},
		"Content-Type": []string{"application/ssml+xml"},
	}
	msg.Entity = SSML{
		Version: "1.0",
		Lang:    "en-US",
		Voice: Voice{
			Name: "Microsoft Server Speech Text to Speech Voice (en-US, EmmaNeural)",
			Text: "Microsoft Cognitive Services Speech SDK JavaScript Sample for Speech Synthesis",
		},
	}

	_, err := msg.Encode()
	if err != nil {
		t.Fatal(err)
	}
}

func TestBinaryMessage_Decode(t *testing.T) {
	rawPayload, err := base64.StdEncoding.DecodeString(base64Payload)
	if err != nil {
		return
	}
	r := bytes.NewReader(rawPayload)
	msg := NewBinaryMessage()
	if err := msg.Decode(r); err != nil {
		t.Fatal(err)
	}
}
